<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-Mapper.dtd">

<mapper namespace="com.kaishengit.mapper.UserMapper">
<!-- namespace属性值推荐写成类似完全限定名的形式 -->

<!-- <cache/> -->
<!-- <cache readOnly="true" size="2048" flushInterval="60" eviction="FIFO/>" -->
<sql id="allColumns">
	id,user_name,password,address,dept_Id
</sql>

<!-- 
	根据id查询User对象
	id：类似方法名
	parameterType:参数类型（可选）
	resultType:返回值类型（可选）
 -->
<!--  <select id="findById" parameterType="int" resultType="User" useCache="false">
 	select 
 	<include refid="allColumns"/>
 	 from t_user where id = #{id}
 </select>  -->
 
 <!-- <select id="findAll" resultType="User">
 	select <include refid="allColumns"/> from t_user
 </select> -->
 
 <!-- <select id="findByUserNameAndPassword" resultType="User">
 	select <include refid="allColumns"/> from t_user where user_name = #{userName} and password = #{password}
 </select>
  -->
 <!-- <select id="findUserByNameAndAdress" resultType="User">
 	select <include refid="allColumns"/> from t_user where user_name = #{arg0} and address = #{arg1}
 </select> -->
 
 <!-- <select id="findUserByMap" parameterType="Map" resultType="User">
 	select <include refid="allColumns"/> from t_user where user_name = #{name} and password = #{pass}
 </select> -->
 
  <select id="searchByNameAndAddress" parameterType="Map" resultType="User">
 	select 
 	<include refid="allColumns"/>
 	from t_user
 	<where>
 		<if test="name != null and name != ''">
 			user_name = #{name}
 		</if>
 		<if test="add != null and add != ''">
 			and address = #{add}
 		</if>
 	</where>
 </select>  
 
 <select id="searchByNameAndAddress2" resultType="User">
 	select <include refid="allColumns"/> from t_user
 	<trim prefix="where" prefixOverrides="and|or">
 		<if test="name != null and name != ''">
 			user_name = #{name} 
 		</if>
 		<if test="add != null and add != ''">
 			 and address = #{add}
 		</if>
 	</trim>
 </select>
 
 
 <select id="findAllLoadDept" resultType="User">
 	SELECT
	t_user.id,
	user_name,
	address,
	dept_id,
	t_dept.id AS `dept.id`,
	t_dept.dept_Name AS `dept.deptName`
FROM
	t_user,
	t_dept
WHERE
	dept_Id = t_dept.id;
 </select>
 
 <!-- <select id="findAllLoadDept" resultMap="userMap">
 	SELECT
	t_user.id,
	user_name,
	address,
	dept_Id,
	dept_Name
FROM
	t_user,
	t_dept
WHERE
	t_user.dept_Id = t_dept.id;
 
 </select> -->
 
 <!-- 自定义结果集映射,告诉MyBatis如何将列和类的属性对应 -->
 
 <!--  <resultMap type="User" id="userMap">
  	<id column="id" property="id"/>
  	<result column="user_name" property="userName"/>
  	<result column="address" property="address"/>
  	<result column="dept_Id" property="deptId"/>
  	<association property="dept" javaType="Dept">
  		<id column="dept_Id" property="id"/>
  		<result column="dept_Name" property="deptName"/>
  	</association>
	
  </resultMap>  -->
 
 <!-- <insert id="save" parameterType="User" useGeneratedKeys="true" keyProperty="id" flushCache="false">
 	insert into t_user(user_name,address,dept_Id,password) 
 	values(#{userName},#{address},#{deptId},#{password})
 </insert> -->
 
 <insert id="batchSave" parameterType="list">
 	insert into t_user (user_name,address,dept_Id,password) values
 	<foreach collection="list" item="user" separator=",">
 		(#{user.userName},#{user.address},#{user.deptId},#{user.password})
 	</foreach>
 </insert>	
 
 <!-- <update id="update" parameterType="User">
 	update t_user set user_name = #{userName},address = #{address} where id = #{id}
 </update> -->
 
 <!-- <delete id="delete" parameterType="int">
 	delete from t_user where id=#{id}
 </delete> -->
 
 <delete id="deleteById" parameterType="List">
 	delete from t_user where id in 
 	<foreach collection="list" item="id" separator="," open="(" close=")">
 		#{id}
 	</foreach>
 </delete>

	
</mapper>